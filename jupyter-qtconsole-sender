#!/usr/bin/python3


"""
Send to a TCP port the commands execute on a Jupyter-QtConsole.

Copyright (C) 2020 Marek Gagolewski (https://www.gagolewski.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


SOCKET_BUF_SIZE = 2048

import sys
import os, os.path, tempfile
import qtpy
from qtpy import QtCore
from qtpy import QtNetwork
import argparse



def find_chunk_bound(text, pos, adv, separators):
    while 0 <= pos+adv < len(text):
        line = text[pos+adv].lstrip()

        for sep in separators:
            if not sep:
                if not line:
                    return pos, ""
            else:
                if line[:len(sep)] == sep:  # Note that "aa"[:100] == "aa"
                    return pos, sep
        pos += adv
    return pos, ""


def get_command(cmd, selection, cursor, chunk):
    if cmd != "-":
        return cmd

    # read from STDIN
    text = sys.stdin.readlines() # includes the trailing \ns

    if selection == ":-:":
        # nothing selected -- execute the current line or chunk
        row, _ = cursor.split(":") # row:col
        row = int(row)

        if not chunk:
            # current line then
            start_pos, end_pos = row, row
        else:
            # chunks (TODO: currently) are defined as code blocks
            # separated by either empty lines or leading ```s,
            # whichever comes first.
            start_pos, start_sep = find_chunk_bound(text, row, -1, ["", "```"])
            end_pos, end_sep = find_chunk_bound(text, row, +1, ["", "```"])

            if start_sep != end_sep:
                if end_sep:
                    start_pos, start_sep = find_chunk_bound(text, start_pos, -1, [end_sep])
                else:
                    end_pos, end_sep = find_chunk_bound(text, end_pos, +1, [start_sep])


        selection = "%d:%d-%d:%d"%(start_pos, 0, end_pos, len(text[end_pos]))

    # from_row-from_col:to_row-to_col -- all bounds are inclusive!
    sel_from, sel_to = selection.split("-")
    sel_from = sel_from.split(":")
    sel_from = int(sel_from[0]), int(sel_from[1])
    sel_to = sel_to.split(":")
    sel_to = int(sel_to[0]), int(sel_to[1])
    assert sel_from[0] <= sel_to[0]

    if sel_to[1] == 0:   # a:b-c:0 -> a:b-(c-1):-1
        sel_to = sel_to[0]-1, -1

    text = text[sel_from[0]:(sel_to[0]+1)]
    text[0] = text[0][sel_from[1]:]

    if sel_from[0] == sel_to[0]: # single text line
        text[0] = text[0][:(sel_to[1]-sel_from[1])]
    else:
        text[-1] = text[-1][:sel_to[1]]

    # remove empty lines from the beginning and the end:
    while len(text)>0 and text[0].isspace():
        text.pop(0)
    while len(text)>0 and text[-1].isspace():
        text.pop(-1)

    if not text: return ""

    # remove trailing spaces and the leading indentation
    indent_size = len(text[0])-len(text[0].lstrip(" "))
    for i in range(len(text)):
        text[i] = text[i].rstrip()
        if not text[i]: continue # ignore empty lines

        cur_indent_size = len(text[i])-len(text[i].lstrip(" "))
        if cur_indent_size < indent_size:
            indent_size = cur_indent_size
        if indent_size > 0:
            text[i] = text[i][indent_size:]

    text = "\n".join(text)

    return text



def write_socket(text, port):
    socket = QtNetwork.QTcpSocket()
    socket.connectToHost(QtNetwork.QHostAddress.LocalHost, port)
    if not socket.isValid() or not socket.waitForConnected(-1):
        raise Exception("Unable connect to a local TCP server at port %d."%port)

    text_bytes = text.encode("utf-8")
    text_size = len(text_bytes)

    # send the number of bytes to read:
    socket.write(QtCore.QByteArray.fromRawData(
        ("%d\n"%text_size).encode("utf-8")))
    if not socket.waitForBytesWritten(-1):
        raise Exception("Error sending buffer size to socket.")

    # send data buffer

    if text_size > 0:
        cur = 0
        while cur < text_size:
            cur_next = min(cur+SOCKET_BUF_SIZE, text_size)
            cur_n = socket.writeData(text_bytes[cur:])
            if cur_n < 0 or not socket.waitForBytesWritten(-1):
                raise Exception("Error sending buffer to socket.")
            cur += cur_n

    socket.waitForDisconnected(-1)

    socket.close()
    socket = None
    return text_size


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Send to a TCP port the commands execute\
        on a Jupyter-QtConsole',
        epilog='Copyright (C) 2020 Marek Gagolewski (https://www.gagolewski.com)',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("cmd", type=str,
        help="Command to execute, '-' to read from the standard input.")
    parser.add_argument("--silent", action="store_true", # store_true->default==False
        help="Should the printing of all messages be suppressed.")
    parser.add_argument("--chunk", action="store_true", # store_true->default==False
        help="Should the the whole code chunk around current cursor "+
        "be executed if there is no text selection.")
    parser.add_argument("--file", default="", type=str,
        help="Path to the current file. Currently ignored, but has great potential.")
    parser.add_argument("--cursor", default="0:0", type=str,
        help="Cursor position as row:col. Ignored unless cmd is '-'.")
    parser.add_argument("--selection", default=":-:", type=str,
        help="Selection position from-to of the form row:col-row:col. "+
        "Ignored unless cmd is '-'. If there is no selection, the whole line "+
        "or code chunk as indicated by the cursor will be executed")
    parser.add_argument("--port", default=6666, type=int,
            help="TCP port to connect to at the localhost.")
    args = parser.parse_args()

    try:
        text = get_command(args.cmd, args.selection, args.cursor, args.chunk)
        text = text.rstrip()

        sent_size = write_socket(text, args.port)
        if not args.silent: print("Sent %d bytes."%sent_size)
        sys.exit(0)

    except Exception as err:
        if not args.silent: print("Error: %s"%format(err))
        sys.exit(1)
