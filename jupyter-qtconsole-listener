#!/usr/bin/python3

"""
An application that features a Jupyter-QtConsole and listens for commands to
execute on a TCP port.

Copyright (C) 2020 Marek Gagolewski (https://www.gagolewski.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


"""
TO DO - listener:
    * help pane at the bottom - react to: ?str.strip help(xxx) - with tabs
    * Kernel -> New kernel from list...
    * Kernel -> Close tab
    * Allow multiple kernels of the same type (python3_1, python3_2, ...)
    * Suppress output
    * Suppress input
    * Clear last output
    * code snippets? run script on startup?
    * object inspector/preview X.e<suggest>
    * Markdown/HTML support? [bare-bone qtconsole doesn't support this]
        from IPython.display import display, Markdown, Latex, HTML
        display(HTML('<strong>aaa!</strong>'))
        display(Latex(r'\phi'))
        display(Markdown(r'$b = \frac{\epsilon}{2}$'))
        display(Math(r'$b = \frac{\epsilon}{2}$')) # this works
        ---- separate QtWebKit viewer pane? with images, man pages etc.?
    * Own magics like #% ??? #%clear #%restart
      #%cd #%pwd

TO DO - sender:
    * set destination kernel name/tab number
    * Dialogue box: server is not running, do you want to start it from the current working directory?
"""


SOCKET_BUF_SIZE = 2048



import sys
import os, os.path, tempfile
import qtpy
from qtpy import QtWidgets
from qtpy import QtCore
from qtpy import QtGui
from qtpy import QtNetwork
from qtconsole.rich_jupyter_widget import RichJupyterWidget
from qtconsole.manager import QtKernelManager
import argparse



class RicherJupyterWidget(RichJupyterWidget):

    def __init__(self, parent, kernel_name):
        kernel_manager = QtKernelManager(kernel_name=kernel_name)
        kernel_manager.start_kernel()

        kernel_client = kernel_manager.client()
        kernel_client.start_channels()

        super().__init__(parent)

        self.kernel_manager = kernel_manager
        self.kernel_client = kernel_client

        #self.set_default_style("linux")
        #self.syntax_style = "monokai"
        self._set_font(QtGui.QFont("Ubuntu Mono", 12))
        self.confirm_restart = False



class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, port, kernel_names, silent):
        super().__init__()
        self.silent = silent
        self.setWindowTitle("jupyter-qtconsole-listener")

        self.server = QtNetwork.QTcpServer(self)
        if not self.server.listen(QtNetwork.QHostAddress.LocalHost, port):
            raise Exception("Unable to set up a local TCP server at port %d"%port)
        self.server.newConnection.connect(self.new_connection)

        self.tabs = QtWidgets.QTabWidget(self)

        self.jupyter_widgets = []
        for i in range(len(kernel_names)):
            jw = RicherJupyterWidget(self.tabs, kernel_names[i])
            self.jupyter_widgets.append(jw)
            self.tabs.addTab(jw, "&"+kernel_names[i])

        self.setCentralWidget(self.tabs)
        self.jupyter_widgets[0]._control.setFocus()
        if not self.silent:
            print("Kernels %r started. Listening at port %d."%(kernel_names, port))

        file_menu = self.menuBar().addMenu("&File")
        act = file_menu.addAction("&Quit", self.close) #, QtGui.QKeySequence.Quit)
        file_menu.addAction(act)

        kernel_menu = self.menuBar().addMenu("&Kernel")
        act = kernel_menu.addAction("&Next Tab", self.next_tab,
                                    QtGui.QKeySequence("Ctrl+PgDown"))
        kernel_menu.addAction(act)
        act = kernel_menu.addAction("&Previous Tab", self.previous_tab,
                                    QtGui.QKeySequence("Ctrl+PgUp"))
        kernel_menu.addAction(act)
        act = kernel_menu.addAction("&Clear Outputs", self.clear_output)
        kernel_menu.addAction(act)
        act = kernel_menu.addAction("&Interrupt Kernel", self.interrupt)
        kernel_menu.addAction(act)
        act = kernel_menu.addAction("&Restart Kernel", self.restart)
        kernel_menu.addAction(act)

        file_menu = self.menuBar().addMenu("&Help")
        act = file_menu.addAction("&About", self.about)
        file_menu.addAction(act)


        screen = app.screenAt(self.pos())
        size = screen.availableGeometry()
        self.resize(size.width()//3, size.height())
        self.move(2*size.width()//3,0)

        #jupyter_widget.clear_output() # current line of output


        #QKeySequence.New
        #QKeySequence.Close

    def interrupt(self):
        jw = self.jupyter_widgets[self.tabs.currentIndex()]
        jw.request_interrupt_kernel()


    def restart(self):
        ret = QtWidgets.QMessageBox.question(self, "Confirm Kernel Restart",
                "Shutdown the current kernel?")
        if ret == QtWidgets.QMessageBox.Yes:
            jw = self.jupyter_widgets[self.tabs.currentIndex()]
            jw.request_interrupt_kernel()
            jw.restart_kernel(None, now=False)


    def closeEvent(self, event):
        ret = QtWidgets.QMessageBox.question(self, "Confirm Quit",
                "Shutdown all kernels and see you later?")
        if ret == QtWidgets.QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

    def clear_output(self):
        jw = self.jupyter_widgets[self.tabs.currentIndex()]
        jw.reset(clear=True)

    def next_tab(self):
        self.tabs.setCurrentIndex(min(self.tabs.currentIndex()+1, self.tabs.count()-1))

    def previous_tab(self):
        self.tabs.setCurrentIndex(max(self.tabs.currentIndex()-1, 0))


    def shutdown_kernel(self):
        for i in range(len(self.jupyter_widgets)):
            self.jupyter_widgets[i].kernel_client.stop_channels()
            self.jupyter_widgets[i].kernel_manager.shutdown_kernel()
        self.server.close()
        if not self.silent:
            print("Bye.")


    def about(self):
        ret = QtWidgets.QMessageBox.about(self, "About jupyter-qtconsole-listener",
                "An application that features a Jupyter-QtConsole " +
                "and listens for commands to execute on a TCP port.\n\n"
                "Copyright (C) 2020 Marek Gagolewski\nhttps://www.gagolewski.com\n\n"+
                "QtConsole: https://github.com/jupyter/qtconsole\n"+
                "Project Jupyter: https://jupyter.org/\n\n"+
                "Licensed under the BSD 3-Clause License"
                )


    def new_connection(self):
        socket = self.server.nextPendingConnection()
        socket.setReadBufferSize(SOCKET_BUF_SIZE)
        socket.waitForReadyRead(-1)

        # expected number of bytes
        text_size = int(socket.readLine().data().decode("utf-8"))
        assert text_size >= 0

        if text_size == 0:
            # This is a test connection.
            socket.disconnectFromHost()
            socket.close()
            socket = None
            if not self.silent:
                print("Test connection OK.")
            return

        if not self.silent:
            print("Receiving %d bytes... "%text_size, end="")
        text = QtCore.QByteArray()
        first = True
        while text.size() != text_size:
            # first batch with no wait, data is pending (I think)
            if not first and not socket.waitForReadyRead(-1):
                if not self.silent:
                    print("Error receiving %d bytes of data. Ignoring this batch."%text_size)
                socket.disconnectFromHost()
                socket.close()
                return
            buf = socket.readAll()
            text.append(QtCore.QByteArray.fromRawData(buf))
            if not self.silent:
                print(text.size(), end=", ")
            first = False

        if not self.silent:
            print("OK, %d bytes received."%text_size)
        socket.disconnectFromHost()
        socket.close()
        socket = None

        assert text_size == text.size()
        text = text.data().decode("utf-8")
        self.execute(text)


    def execute(self, code):
        jw = self.jupyter_widgets[self.tabs.currentIndex()]
        cursor = jw._get_end_cursor()
        cursor.beginEditBlock()
        try:
            first = True
            for line in code.splitlines():
                if not first:
                    cursor.insertText("\n")
                    jw._insert_continuation_prompt(cursor, False)
                else:
                    first = False
                cursor.insertText(line)
        finally:
            cursor.endEditBlock()

        jw.do_execute(source=code, complete=True, indent=False)







if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='An application that features a Jupyter-QtConsole\
        and listens for commands to execute on a TCP port.',
        epilog='Copyright (C) 2020 Marek Gagolewski (https://www.gagolewski.com)',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("kernel", default=['python3', 'ir'], type=str, nargs='*',
        help="The id of an installed kernel, e.g., 'python3' (the default),\
            'bash' or 'ir'.")
    parser.add_argument("--silent", action="store_true",
                        help="Should the printing of all messages be suppressed.")
    parser.add_argument("--port", default=6666, type=int,
            help="TCP port the localhost shall listen at.")

    args = parser.parse_args()


    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow(args.port, args.kernel, args.silent)
    window.show()
    app.aboutToQuit.connect(window.shutdown_kernel)
    app.exec_()
