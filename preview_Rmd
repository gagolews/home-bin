#!/usr/bin/python3

# TODO: Refresh with F5

"""
Preview an Rmd/md file with knitr+pandoc and watch it for changes.

# ############################################################################ #
#                                                                              #
#   Copyleft (C) 2020-2023, Marek Gagolewski <https://www.gagolewski.com>      #
#                                                                              #
#                                                                              #
#   This program is free software: you can redistribute it and/or modify       #
#   it under the terms of the GNU Affero General Public License                #
#   Version 3, 19 November 2007, published by the Free Software Foundation.    #
#   This program is distributed in the hope that it will be useful,            #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               #
#   GNU Affero General Public License Version 3 for more details.              #
#   You should have received a copy of the License along with this program.    #
#   If this is not the case, refer to <https://www.gnu.org/licenses/>.         #
#                                                                              #
# ############################################################################ #
"""


import PySide2
import sys, os.path, tempfile, os, subprocess, hashlib
from PySide2.QtWidgets import QVBoxLayout, QApplication
from PySide2.QtWidgets import QWidget, QTextEdit, QSplitter
from PySide2.QtCore import QFileSystemWatcher, QUrl
from PySide2.QtWebEngineWidgets import QWebEngineView
import argparse


class MainWindow(QWidget):
    def __init__(self, filename, tmpname):
        super().__init__()
        self.filename = filename
        self.tmpname = tmpname
        self.setWindowTitle(self.filename)
        self.htmlview = QWebEngineView()
        self.statusview = QTextEdit()


        screen = app.screenAt(self.pos())
        size = screen.availableGeometry()
        self.resize(size.width()//3, size.height())
        self.move(2*size.width()//3,0)

        layout = QVBoxLayout(self)

        splitter = QSplitter(self)
        splitter.addWidget(self.htmlview)
        splitter.addWidget(self.statusview)
        splitter.setOrientation(PySide2.QtCore.Qt.Orientation.Vertical)

        layout.addWidget(splitter)

        self.setLayout(layout)
        self.lasthash = ""

    def rebuild(self): # this is sometimes called twice, hence we use a hashfun
        #self.htmlview.setHtml("""
            #<html><body>
            #<h1 style='color:gray'>Building %s...</h1>
            #</body></html>
        #"""%self.filename)
        global watcher
        if self.filename not in watcher.files():
            # the file might be deleted and then recreated
            watcher.addPath(self.filename)

        h = hashlib.sha1()
        with open(self.filename, "rb") as f:
            buf = f.read()
            h.update(buf)

        if self.lasthash == h.hexdigest():
            return # nothing to do, file not changed
        else:
            self.lasthash = h.hexdigest()

        self.statusview.clear()
        self.statusview.setReadOnly(True)
        self.statusview.setFontFamily("monospace")
        self.statusview.setPlainText("rendering...")
        ret = subprocess.run(args=["knit2html", self.filename, self.tmpname],
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            env={**os.environ,
                 "MATHJAX_URL": "/usr/share/javascript/mathjax/MathJax.js?config=TeX-MML-AM_CHTML"},
            check=False
        )

        if ret.returncode == 0:
            #h = open(self.tmpname, "r").read()
            self.htmlview.setUrl(QUrl.fromLocalFile(self.tmpname))
            self.statusview.setPlainText(ret.stdout.decode())
        else:
            self.statusview.setPlainText("""\
Error building %s...

%s
"""%(self.filename, ret.stdout.decode()))

        #.htmlview.page().view().scroll(0, 100)#int(self.lastpos.x()), int(self.lastpos.y()))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Preview an Rmd/md file with knitr+pandoc and watch it for changes.',
        epilog='Copyleft (C) 2020-2023, Marek Gagolewski <https://www.gagolewski.com>'
    )
    parser.add_argument("filename")
    args = parser.parse_args()

    if not os.path.isfile(args.filename):
        print("File %s does not exist."%args.filename, file=sys.stderr)
        sys.exit(1)

    tmpfile = tempfile.mkstemp(".html", text=True)
    os.close(tmpfile[0])
    tmpname = tmpfile[1]



    app = QApplication(sys.argv)
    main = MainWindow(args.filename, tmpname)

    watcher = QFileSystemWatcher([args.filename])
    watcher.fileChanged.connect(main.rebuild)
    main.rebuild()

    main.show()
    app.exec_()


    try:
        os.remove(tmpname)
    except OSError:
        pass
